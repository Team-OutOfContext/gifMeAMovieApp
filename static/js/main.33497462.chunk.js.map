{"version":3,"sources":["components/MovieSuggestions.js","components/LoadingScreen.js","components/MovieInput.js","components/MovieScreen.js","App.js","serviceWorker.js","index.js"],"names":["MovieSuggestions","props","className","movieSuggestions","map","movieSuggestion","movieImageUrl","poster_path","movieTitleHtml","movieYear","undefined","release_date","title","slice","key","id","tabIndex","onClick","getMovieKeywords","LoadingScreen","class","MovieInput","getUserInput","e","setState","target","value","getMovieDetails","RegExp","test","state","userInput","axios","url","method","dataResponse","params","api_key","apiKeyMovieDb","query","include_adult","then","response","data","results","length","errorMessage","autoSuggestions","catch","error","movieId","movieTitle","showLoadingScreen","movie_id","movieKeywords","keywords","filterKeywords","makeGiphyApiCalls","prepMoviePosterData","keywordCheck","filteredKeywords","filter","keyword","name","prepGiphyApiCalls","shuffleKeywordsArray","randomGifNum","gifPromises","forEach","push","getKeywordGifs","i","getRandomGifs","prepGifData","newKeywordsArray","newIndex","Math","floor","random","currentKeyword","keywordToSwap","slicedKeywords","apiKeyGiphy","q","rating","all","gifPromiseReturns","gifDataArray","gifPromiseReturn","gifData","Array","isArray","randomNumber","showGifs","showButton","passMovieInfoProps","movieImageAltText","console","log","noGifs","movieImageCheck","this","htmlFor","type","placeholder","onChange","passMovieInfo","Component","MovieScreen","src","alt","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","cssEase","gif","images","original","webp","App","showMovieInputComp","resetState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33497462.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MovieSuggestions = props => {\r\n  return (\r\n    <ul className=\"movie-results-part-one\">\r\n      {props.movieSuggestions.map(movieSuggestion => {\r\n        let movieImageUrl = \"../assets/poster-placeholder.png\"; //placeholder img url\r\n        // check for movie poster data\r\n        if (movieSuggestion.poster_path !== null) {\r\n          movieImageUrl = `https://image.tmdb.org/t/p/w500${movieSuggestion.poster_path}`;\r\n        }\r\n        let movieTitleHtml = \"\";\r\n        let movieYear = \"\";\r\n        if (\r\n          movieSuggestion.release_date === undefined ||\r\n          movieSuggestion.release_date === \"\"\r\n        ) {\r\n          movieTitleHtml = `${movieSuggestion.title}`;\r\n        } else {\r\n          movieYear = movieSuggestion.release_date.slice(0, 4);\r\n          movieTitleHtml = `${movieSuggestion.title} (${movieYear})`;\r\n        }\r\n\r\n        return (\r\n          <li\r\n            className=\"movie-listing\"\r\n            key={movieSuggestion.id}\r\n            tabIndex=\"0\"\r\n            onClick={() => {\r\n              props.getMovieKeywords(\r\n                movieSuggestion.id,\r\n                movieSuggestion.title,\r\n                movieYear,\r\n                movieImageUrl\r\n              );\r\n            }}\r\n          >\r\n            <p>{movieTitleHtml}</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default MovieSuggestions;\r\n","import React from \"react\";\r\n\r\nconst LoadingScreen = () => {\r\n    return (\r\n        <div className=\"loading-screen\">\r\n            <div class=\"lds-ellipsis\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingScreen;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport MovieSuggestions from \"./MovieSuggestions\";\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\nclass MovieInput extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      apiKeyMovieDb: \"38f9a8f5c677f0356adca226f357b762\",\r\n      apiKeyGiphy: \"x51UFN0xOVPnehx6f4dJxLphvkXnx19U\",\r\n      userInput: \"\",\r\n      movieSuggestions: [\"hi\"],\r\n      movieTitle: \"\",\r\n      movieYear: \"\",\r\n      movieImageUrl: \"\",\r\n      movieKeywords: [],\r\n      gifDataArray: [],\r\n      showGifs: false,\r\n      showLoadingScreen: false,\r\n      errorMessage: false,\r\n      autoSuggestions: false,\r\n      showButton: false,\r\n      noGifs: false\r\n    };\r\n  }\r\n\r\n  //This function gets users search term as they type.\r\n  getUserInput = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  // This function is for getting movie details from the user input\r\n  getMovieDetails = () => {\r\n    // use regex to check for non-space characters\r\n    const regexCheck = RegExp(/\\w/g);\r\n\r\n    // axios call is only made once there are alphanumeric characters\r\n    if (regexCheck.test(this.state.userInput)) {\r\n      // Make axios call to get movie details\r\n      axios({\r\n        url: `https://api.themoviedb.org/3/search/movie`,\r\n        method: \"GET\",\r\n        dataResponse: \"json\",\r\n        params: {\r\n          api_key: this.state.apiKeyMovieDb,\r\n          query: this.state.userInput,\r\n          include_adult: false\r\n        }\r\n      })\r\n        .then(response => {\r\n          // no movies returned (empty array)\r\n          if (response.data.results.length === 0) {\r\n            this.setState({\r\n              errorMessage: true,\r\n              autoSuggestions: false\r\n            });\r\n          } else {\r\n            // Setting the state to an array of movies and making the autosuggestion show up on the page\r\n            const movieSuggestions = response.data.results.slice(0, 10);\r\n            this.setState({\r\n              movieSuggestions: movieSuggestions,\r\n              autoSuggestions: true,\r\n              errorMessage: false\r\n            });\r\n          }\r\n        }) // end of .then\r\n        .catch(error => {\r\n          this.setState({\r\n            errorMessage: true\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  // Function to get keywords for the user's movie choice\r\n  getMovieKeywords = (movieId, movieTitle, movieYear, movieImageUrl) => {\r\n    // Save the user's movie choice to state\r\n    this.setState({\r\n      movieTitle: movieTitle,\r\n      movieYear: movieYear,\r\n      movieImageUrl: movieImageUrl,\r\n      showLoadingScreen: true\r\n    });\r\n\r\n    // Axios call to get the keywords\r\n    axios({\r\n      url: `https://api.themoviedb.org/3/movie/${movieId}/keywords`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyMovieDb,\r\n        movie_id: movieId\r\n      }\r\n    })\r\n      .then(response => {\r\n        this.setState({\r\n          movieKeywords: response.data.keywords,\r\n          userInput: \"\",\r\n          autoSuggestions: false\r\n        });\r\n        this.filterKeywords();\r\n      }) // end of .then\r\n      .catch(error => {\r\n        // if there's an error getting keywords, just get 3 random gifs\r\n        this.makeGiphyApiCalls(3);\r\n      });\r\n\r\n    this.prepMoviePosterData();\r\n  };\r\n\r\n  // function to filter for unsearchable keywords\r\n  // (Movie API has some weird keywords like \"aftercreditsstinger\" for post credit scenes that result in nothing/errors from Giphy =__=)\r\n  filterKeywords = () => {\r\n    const keywordCheck = RegExp(/(stinger)$/);\r\n    const filteredKeywords = this.state.movieKeywords.filter(\r\n      keyword => !keywordCheck.test(keyword.name)\r\n    );\r\n    this.setState({\r\n      movieKeywords: filteredKeywords\r\n    });\r\n    this.prepGiphyApiCalls();\r\n  };\r\n\r\n  // function to determine how many keyword-based API calls & random API calls we need\r\n  // if there's 3 or more keywords, shuffle the keyword array for random 3 keywords to use for Giphy API call\r\n  // if less than 3 keywords, we make API calls for the # of random gifs needed to make up 3 gifs total\r\n  prepGiphyApiCalls = () => {\r\n    if (this.state.movieKeywords.length >= 3) {\r\n      this.shuffleKeywordsArray();\r\n    } else if (this.state.movieKeywords.length === 2) {\r\n      this.makeGiphyApiCalls(1);\r\n    } else if (this.state.movieKeywords.length === 1) {\r\n      this.makeGiphyApiCalls(2);\r\n    } else {\r\n      this.makeGiphyApiCalls(3);\r\n    }\r\n  };\r\n\r\n  // function to make the right Giphy API calls, then update to state\r\n  makeGiphyApiCalls = randomGifNum => {\r\n    const gifPromises = [];\r\n    this.state.movieKeywords.forEach(keyword => {\r\n      gifPromises.push(this.getKeywordGifs(keyword.name));\r\n    });\r\n    // making calls for x amount of random gifs needed if lacking keywords\r\n    for (let i = 0; i < randomGifNum; i++) {\r\n      gifPromises.push(this.getRandomGifs());\r\n    }\r\n    this.prepGifData(gifPromises);\r\n  };\r\n\r\n  //Function to shuffle keywords from return from Moviedb. Then, grabbing the first three keywords and setting them to state (keywordForGiphy state).\r\n  shuffleKeywordsArray = () => {\r\n    const newKeywordsArray = [...this.state.movieKeywords];\r\n    //Fisher-Yates algorithm for shuffling the array.\r\n    for (let i = newKeywordsArray.length - 1; i > 0; i--) {\r\n      const newIndex = Math.floor(Math.random() * (i + 1));\r\n      const currentKeyword = newKeywordsArray[i];\r\n      const keywordToSwap = newKeywordsArray[newIndex];\r\n      newKeywordsArray[i] = keywordToSwap;\r\n      newKeywordsArray[newIndex] = currentKeyword;\r\n    }\r\n    //Slicing the keyword return to pull only the first three random keywords to use as our giphy call search.\r\n    const slicedKeywords = newKeywordsArray.slice(0, 3);\r\n    this.setState({\r\n      movieKeywords: slicedKeywords\r\n    });\r\n    this.makeGiphyApiCalls(0);\r\n  };\r\n\r\n  // Axios call to get gifs related to the keyword\r\n  getKeywordGifs = keyword => {\r\n    return axios({\r\n      url: `https://api.giphy.com/v1/gifs/search`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyGiphy,\r\n        q: keyword\r\n      }\r\n    });\r\n  };\r\n\r\n  // function for this.state.movieKgetting a random gif if there are no keywords (API only returns 1 gif)\r\n  getRandomGifs = () => {\r\n    return axios({\r\n      url: `https://api.giphy.com/v1/gifs/random`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyGiphy,\r\n        rating: \"pg\"\r\n      }\r\n    });\r\n  };\r\n\r\n  prepGifData = gifPromises => {\r\n    // wait for API responses to come back\r\n    axios\r\n      .all(gifPromises)\r\n      .then(gifPromiseReturns => {\r\n        const gifDataArray = [];\r\n        gifPromiseReturns.forEach(gifPromiseReturn => {\r\n          let gifData = \"\";\r\n          if (Array.isArray(gifPromiseReturn.data.data) === true) {\r\n            const randomNumber = Math.floor(\r\n              Math.random() * gifPromiseReturn.data.data.length\r\n            );\r\n            gifData = gifPromiseReturn.data.data[randomNumber];\r\n          } else {\r\n            gifData = gifPromiseReturn.data.data;\r\n          }\r\n          // Randomly selecting a gif from the response data\r\n          gifDataArray.push(gifData);\r\n        });\r\n\r\n        this.setState(\r\n          {\r\n            showLoadingScreen: false,\r\n            gifDataArray: gifDataArray,\r\n            showGifs: true,\r\n            showButton: true\r\n          },\r\n          () => {\r\n            this.props.passMovieInfoProps(\r\n              this.state.movieTitle,\r\n              this.state.movieImageUrl,\r\n              this.state.movieImageAltText,\r\n              this.state.gifDataArray,\r\n              this.state.movieKeywords\r\n            );\r\n          }\r\n        );\r\n      }) // end of .then\r\n      .catch(error => {\r\n        // NEED TO PRINT THIS TO PAGE\r\n        console.log(\r\n          \"Sorry, this movie is not currently playing at our theatre! Please try another movie.\"\r\n        );\r\n        this.setState({\r\n          showLoadingScreen: false,\r\n          noGifs: true,\r\n          showButton: true\r\n        });\r\n      });\r\n  };\r\n\r\n  prepMoviePosterData = () => {\r\n    // check if it's the movie poster from API or our placeholder img\r\n    const movieImageCheck = RegExp(/^(http)/);\r\n    if (movieImageCheck.test(this.state.movieImageUrl)) {\r\n      console.log(movieImageCheck.test(this.state.movieImageUrl));\r\n      this.setState({\r\n        movieImageAltText: \"Movie poster for\"\r\n      });\r\n    } else {\r\n      console.log(movieImageCheck.test(this.state.movieImageUrl));\r\n      this.setState({\r\n        movieImageAltText: \"Placeholder image for the movie poster for\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"movie-input-section\">\r\n        <div className=\"wrapper\">\r\n          <h1>Gif Me A Movie</h1>\r\n          <h2>A theatre for those who don't have time</h2>\r\n\r\n          <div className=\"search-bar\">\r\n            {this.state.errorMessage ? (\r\n              <p className=\"error-message\">\r\n                Your movie doesn't seem to be playing here!\r\n              </p>\r\n            ) : null}\r\n            <label htmlFor=\"userInput\" className=\"visually-hidden\">\r\n              Search a movie title\r\n            </label>\r\n            <div className=\"search-container\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"userInput\"\r\n                className=\"search-input\"\r\n                placeholder=\"Search for a movie\"\r\n                value={this.state.userInput}\r\n                onChange={e => {\r\n                  this.getUserInput(e);\r\n                  this.getMovieDetails();\r\n                }}\r\n              />\r\n              <i className=\"fas fa-search search-icon\"></i>\r\n            </div>\r\n\r\n            <div className=\"movie-results\">\r\n              {this.state.autoSuggestions && this.state.userInput !== \"\" ? (\r\n                <MovieSuggestions\r\n                  movieSuggestions={this.state.movieSuggestions}\r\n                  getMovieKeywords={this.getMovieKeywords}\r\n                  passMovieInfoProps={this.passMovieInfo}\r\n                />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"movie-seats\"></div>\r\n        </div>\r\n        {this.state.errorMessage ? <LoadingScreen /> : null}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieInput;\r\n","import React, { Component } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nclass MovieScreen extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      movieImageAltText: \"\"\r\n    };\r\n  }\r\n  render() {\r\n    const settings = {\r\n      dots: true,\r\n      infinite: true,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      autoplay: true,\r\n      speed: 2000,\r\n      autoplaySpeed: 1200,\r\n      cssEase: \"linear\"\r\n    };\r\n    return (\r\n      <section className=\"results wrapper\">\r\n        <div className=\"top-title\">\r\n          <h5 className=\"now-playing-title\">Now Playing</h5>\r\n          <h3 className=\"movie-title\">{this.props.movieTitle}</h3>\r\n        </div>\r\n\r\n        <div className=\"movie-screen\">\r\n          <div className=\"movie-poster\">\r\n            <img\r\n              src={this.props.movieImageUrl}\r\n              alt={this.props.movieImageAltText}\r\n            />\r\n          </div>\r\n          <div className=\"gif-results\">\r\n            <Slider {...settings}>\r\n              {this.props.gifDataArray.map((gif, i) => {\r\n                return (\r\n                  <li key={i} className=\"carousel-cell\">\r\n                    <img\r\n                      className=\"carousel-cell-image\"\r\n                      src={gif.images.original.webp}\r\n                      alt={gif.title}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </Slider>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"critics-review\">\r\n          {this.props.movieKeywords.length === 3 ? (\r\n            <p>\r\n              When <strong>{this.props.movieKeywords[0].name}</strong> and\r\n              <strong> {this.props.movieKeywords[1].name}</strong> fall in love,{\" \"}\r\n              <strong>{this.props.movieKeywords[2].name}</strong> ensues.\r\n            </p>\r\n          ) : null}\r\n          {this.props.movieKeywords.length === 2 ? (\r\n            <p>\r\n              When <strong>{this.props.movieKeywords[0].name}</strong> and\r\n              <strong> {this.props.movieKeywords[1].name}</strong> fall in love.\r\n            </p>\r\n          ) : null}\r\n          {this.props.movieKeywords.length === 1 ? (\r\n            <p>\r\n              When <strong>{this.props.movieKeywords[0].name}</strong> ensues.\r\n            </p>\r\n          ) : null}\r\n          {this.props.movieKeywords.length === 0 ? (\r\n            <p>Critics say this movie is an indescribable experience.</p>\r\n          ) : null}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieScreen;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/style.css\";\r\nimport MovieInput from \"./components/MovieInput.js\";\r\nimport MovieScreen from \"./components/MovieScreen.js\";\r\nimport LoadingScreen from \"./components/LoadingScreen\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n      movieTitle: \"\",\r\n      movieYear: \"\",\r\n      movieImageUrl: \"\",\r\n      movieKeywords: [],\r\n      movieImageAltText: \"\",\r\n      gifDataArray: [],\r\n      showGifs: false,\r\n      showLoadingScreen: false,\r\n      errorMessage: false,\r\n      autoSuggestions: false,\r\n      showButton: false,\r\n      noGifs: false,\r\n      showMovieInputComp: true\r\n    };\r\n  }\r\n\r\n  passMovieInfo = (\r\n    movieTitle,\r\n    movieImageUrl,\r\n    movieImageAltText,\r\n    gifDataArray,\r\n    movieKeywords\r\n  ) => {\r\n    this.setState({\r\n      movieTitle: movieTitle,\r\n      movieImageUrl: movieImageUrl,\r\n      movieImageAltText: movieImageAltText,\r\n      gifDataArray: gifDataArray,\r\n      movieKeywords: movieKeywords,\r\n      showLoadingScreen: false,\r\n      showGifs: true,\r\n      showButton: true,\r\n      showMovieInputComp: false\r\n    });\r\n  };\r\n\r\n  // Reset everything to search a new movie (called on button press)\r\n  resetState = () => {\r\n    this.setState({\r\n      userInput: \"\",\r\n      movieTitle: \"\",\r\n      movieYear: \"\",\r\n      movieImageUrl: \"\",\r\n      movieImageAltText: \"\",\r\n      movieKeywords: [],\r\n      gifDataArray: [],\r\n      showButton: false,\r\n      noGifs: false,\r\n      errorMessage: false,\r\n      showMovieInputComp: true,\r\n      showGifs: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.showMovieInputComp ? (\r\n          <MovieInput passMovieInfoProps={this.passMovieInfo} />\r\n        ) : null}\r\n\r\n        {this.state.showGifs ? (\r\n          <MovieScreen\r\n            movieTitle={this.state.movieTitle}\r\n            movieImageUrl={this.state.movieImageUrl}\r\n            movieImageAltText={this.state.movieImageAltText}\r\n            gifDataArray={this.state.gifDataArray}\r\n            showGifs={this.state.showGifs}\r\n            movieKeywords={this.state.movieKeywords}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.noGifs ? (\r\n          <p>\r\n            Sorry, this movie is not currently playing at our theatre! Please\r\n            try searching a different movie.\r\n          </p>\r\n        ) : null}\r\n\r\n        {this.state.showButton ? (\r\n          <div className=\"button-section\">\r\n            <button className=\"reset\" onClick={this.resetState}>\r\n              Watch another movie?\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n\r\n        {this.state.showLoadingScreen ? (\r\n          <LoadingScreen />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}