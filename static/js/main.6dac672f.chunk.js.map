{"version":3,"sources":["components/MovieSuggestions.js","App.js","serviceWorker.js","index.js"],"names":["MovieSuggestions","props","className","movieSuggestions","map","movieSuggestion","movieImageUrl","poster_path","movieTitleHtml","movieYear","undefined","release_date","title","slice","key","id","tabIndex","onClick","getMovieKeywords","App","getUserInput","e","setState","target","value","getMovieDetails","regexCheck","RegExp","console","log","state","userInput","length","test","axios","url","method","dataResponse","params","api_key","apiKeyMovieDb","query","include_adult","then","response","data","results","errorMessage","autoSuggestions","catch","error","movieId","movieTitle","showLoadingScreen","movie_id","keywords","movieKeywords","filterKeywords","makeGiphyApiCalls","keywordCheck","filteredKeywords","filter","keyword","name","prepGiphyApiCalls","shuffleKeywordsArray","getRandomGifs","apiKeyGiphy","rating","randomGifNum","gifPromises","forEach","push","getKeywordGifs","i","prepGifData","all","gifPromiseReturns","gifDataArray","gifPromiseReturn","gifData","Array","isArray","randomNumber","Math","floor","random","showGifs","showButton","noGifs","newKeywordsArray","newIndex","currentKeyword","keywordToSwap","slicedKeywords","q","resetState","htmlFor","type","placeholder","this","onChange","gif","movieImageCheck","src","images","original","webp","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dac672f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MovieSuggestions = props => {\n  return (\n    <ul className=\"movie-results-part-one\">\n      {props.movieSuggestions.map(movieSuggestion => {\n        let movieImageUrl = \"\"; //placeholder img url\n        // check for movie poster data\n        if (movieSuggestion.poster_path !== null) {\n          movieImageUrl = `https://image.tmdb.org/t/p/w500${movieSuggestion.poster_path}`;\n        }\n        let movieTitleHtml = \"\";\n        let movieYear = \"\";\n        if (\n          movieSuggestion.release_date === undefined ||\n          movieSuggestion.release_date === \"\"\n        ) {\n          movieTitleHtml = `${movieSuggestion.title}`;\n        } else {\n          movieYear = movieSuggestion.release_date.slice(0, 4);\n          movieTitleHtml = `${movieSuggestion.title} (${movieYear})`;\n        }\n\n        return (\n          <li\n            className=\"movie-listing\"\n            key={movieSuggestion.id}\n            tabIndex=\"0\"\n            onClick={() => {\n              props.getMovieKeywords(\n                movieSuggestion.id,\n                movieSuggestion.title,\n                movieYear,\n                movieImageUrl\n              );\n            }}\n          >\n            <p>{movieTitleHtml}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MovieSuggestions;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/style.css\";\nimport MovieSuggestions from \"./components/MovieSuggestions.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiKeyMovieDb: \"38f9a8f5c677f0356adca226f357b762\",\n      apiKeyGiphy: \"x51UFN0xOVPnehx6f4dJxLphvkXnx19U\",\n      userInput: \"\",\n      autoSuggestions: false,\n      movieSuggestions: [\"hi\"],\n      movieTitle: \"\",\n      movieYear: \"\",\n      movieImageUrl: \"\",\n      movieKeywords: [],\n      gifDataArray: [],\n      showGifs: false,\n      noGifs: false,\n      showButton: false,\n      errorMessage: false,\n      showLoadingScreen: false\n    };\n  }\n\n  //This function gets users search term as they type.\n  getUserInput = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  // This function is for getting movie details from the user input\n  getMovieDetails = () => {\n    // use regex to check for non-space characters\n    const regexCheck = RegExp(/\\w/g);\n    console.log(this.state.userInput.length);\n    console.log(regexCheck.test(this.state.userInput));\n    // axios call is only made once there are alphanumeric characters\n    if (regexCheck.test(this.state.userInput)) {\n      // Make axios call to get movie details\n      axios({\n        url: `https://api.themoviedb.org/3/search/movie`,\n        method: \"GET\",\n        dataResponse: \"json\",\n        params: {\n          api_key: this.state.apiKeyMovieDb,\n          query: this.state.userInput,\n          include_adult: false\n        }\n      })\n        .then(response => {\n          // no movies returned (empty array)\n          if (response.data.results.length === 0) {\n            this.setState({\n              errorMessage: true\n            });\n          } else {\n            // Setting the state to an array of movies and making the autosuggestion show up on the page\n            this.setState({\n              movieSuggestions: response.data.results,\n              autoSuggestions: true\n            });\n          }\n        }) // end of .then\n        .catch(error => {\n          this.setState({\n            errorMessage: true\n          });\n          console.log(error);\n        });\n    }\n  };\n\n  // Function to get keywords for the user's movie choice\n  getMovieKeywords = (movieId, movieTitle, movieYear, movieImageUrl) => {\n    // Save the user's movie choice to state\n    this.setState({\n      movieTitle: movieTitle,\n      movieYear: movieYear,\n      movieImageUrl: movieImageUrl,\n      showLoadingScreen: true\n    });\n\n    // Axios call to get the keywords\n    axios({\n      url: `https://api.themoviedb.org/3/movie/${movieId}/keywords`,\n      method: \"GET\",\n      dataResponse: \"json\",\n      params: {\n        api_key: this.state.apiKeyMovieDb,\n        movie_id: movieId\n      }\n    })\n      .then(response => {\n        console.log(response.data.keywords, \"get movie keywords axios call\");\n        this.setState({\n          movieKeywords: response.data.keywords,\n          userInput: \"\",\n          autoSuggestions: false\n        });\n        this.filterKeywords();\n      }) // end of .then\n      .catch(error => {\n        // if there's an error getting keywords, just get 3 random gifs\n        this.makeGiphyApiCalls(3);\n      });\n  };\n\n  // function to filter for unsearchable keywords\n  // (Movie API has some weird keywords like \"aftercreditsstinger\" for post credit scenes that result in nothing/errors from Giphy =__=)\n  filterKeywords = () => {\n    const keywordCheck = RegExp(/(stinger)$/);\n    const filteredKeywords = this.state.movieKeywords.filter(\n      keyword => !keywordCheck.test(keyword.name)\n    );\n    this.setState({\n      movieKeywords: filteredKeywords\n    });\n    this.prepGiphyApiCalls();\n  };\n\n  // function to determine how many keyword-based API calls & random API calls we need\n  // if there's 3 or more keywords, shuffle the keyword array for random 3 keywords to use for Giphy API call\n  // if less than 3 keywords, we make API calls for the # of random gifs needed to make up 3 gifs total\n  prepGiphyApiCalls = () => {\n    if (this.state.movieKeywords.length >= 3) {\n      this.shuffleKeywordsArray();\n    } else if (this.state.movieKeywords.length === 2) {\n      this.makeGiphyApiCalls(1);\n    } else if (this.state.movieKeywords.length === 1) {\n      this.makeGiphyApiCalls(2);\n    } else {\n      this.makeGiphyApiCalls(3);\n    }\n  };\n\n  // function for this.state.movieKgetting a random gif if there are no keywords (API only returns 1 gif)\n  getRandomGifs = () => {\n    return axios({\n      url: `https://api.giphy.com/v1/gifs/random`,\n      method: \"GET\",\n      dataResponse: \"json\",\n      params: {\n        api_key: this.state.apiKeyGiphy,\n        rating: \"pg\"\n      }\n    });\n  };\n\n  // function to make the right Giphy API calls, then update to state\n  makeGiphyApiCalls = randomGifNum => {\n    const gifPromises = [];\n    this.state.movieKeywords.forEach(keyword => {\n      gifPromises.push(this.getKeywordGifs(keyword.name));\n    });\n    // making calls for x amount of random gifs needed if lacking keywords\n    for (let i = 0; i < randomGifNum; i++) {\n      gifPromises.push(this.getRandomGifs());\n    }\n    this.prepGifData(gifPromises);\n  };\n\n  prepGifData = gifPromises => {\n    // wait for API responses to come back\n    axios\n      .all(gifPromises)\n      .then(gifPromiseReturns => {\n        const gifDataArray = [];\n        gifPromiseReturns.forEach(gifPromiseReturn => {\n          let gifData = \"\";\n          if (Array.isArray(gifPromiseReturn.data.data) === true) {\n            console.log(gifPromiseReturn.data.data);\n            const randomNumber = Math.floor(\n              Math.random() * gifPromiseReturn.data.data.length\n            );\n            gifData = gifPromiseReturn.data.data[randomNumber];\n          } else {\n            gifData = gifPromiseReturn.data.data;\n          }\n          // Randomly selecting a gif from the response data\n          gifDataArray.push(gifData);\n        });\n\n        this.setState({\n          showLoadingScreen: false,\n          gifDataArray: gifDataArray,\n          showGifs: true,\n          showButton: true\n        });\n        console.log(gifDataArray);\n      }) // end of .then\n      .catch(error => {\n        console.log(error);\n        // NEED TO PRINT THIS TO PAGE\n        console.log(\n          \"Sorry, this movie is not currently playing at our theatre! Please try another movie.\"\n        );\n        this.setState({\n          showLoadingScreen: false,\n          noGifs: true,\n          showButton: true\n        });\n      });\n  };\n\n  //Function to shuffle keywords from return from Moviedb. Then, grabbing the first three keywords and setting them to state (keywordForGiphy state).\n  shuffleKeywordsArray = () => {\n    const newKeywordsArray = [...this.state.movieKeywords];\n    //Fisher-Yates algorithm for shuffling the array.\n    for (let i = newKeywordsArray.length - 1; i > 0; i--) {\n      const newIndex = Math.floor(Math.random() * (i + 1));\n      const currentKeyword = newKeywordsArray[i];\n      const keywordToSwap = newKeywordsArray[newIndex];\n      newKeywordsArray[i] = keywordToSwap;\n      newKeywordsArray[newIndex] = currentKeyword;\n    }\n    //Slicing the keyword return to pull only the first three random keywords to use as our giphy call search.\n    const slicedKeywords = newKeywordsArray.slice(0, 3);\n    this.setState({\n      movieKeywords: slicedKeywords\n    });\n    this.makeGiphyApiCalls(0);\n    console.log(this.state.movieKeywords[0].name);\n  };\n\n  // Axios call to get gifs related to the keyword\n  getKeywordGifs = keyword => {\n    return axios({\n      url: `https://api.giphy.com/v1/gifs/search`,\n      method: \"GET\",\n      dataResponse: \"json\",\n      params: {\n        api_key: this.state.apiKeyGiphy,\n        q: keyword\n      }\n    });\n  };\n\n  // Reset everything to search a new movie (called on button press)\n  resetState = () => {\n    this.setState({\n      userInput: \"\",\n      movieTitle: \"\",\n      movieYear: \"\",\n      movieImageUrl: \"\",\n      movieKeywords: [],\n      gifDataArray: [],\n      showButton: false,\n      noGifs: false,\n      errorMessage: false\n    });\n  };\n\n  render() {\n    // console.log(\"page render\");\n    return (\n      <div className=\"main\">\n        <ul className=\"search\">\n          <div className=\"wrapper\">\n            <h1>GIF ME A MOVIE!</h1>\n            <h3>A movie theatre for watching a movie within 5 seconds!!!</h3>\n\n            <div className=\"search-bar\">\n              <label htmlFor=\"userInput\">Search a movie title</label>\n              <input\n                type=\"text\"\n                id=\"userInput\"\n                className=\"search-input\"\n                placeholder=\"Search for a movie\"\n                value={this.state.userInput}\n                onChange={e => {\n                  this.getUserInput(e);\n                  this.getMovieDetails();\n                }}\n              />\n              <i className=\"fas fa-search search-icon\"></i>\n            </div>\n          </div>\n          {this.state.errorMessage ? <p>Your movie doesn't exist!</p> : null}\n\n          <div className=\"wrapper\">\n            <div className=\"search-bar\">\n              <div className=\"movie-results\" id=\"mainContent\">\n                {this.state.autoSuggestions ? (\n                  <MovieSuggestions\n                    movieSuggestions={this.state.movieSuggestions}\n                    getMovieKeywords={this.getMovieKeywords}\n                  />\n                ) : null}\n              </div>\n            </div>\n          </div>\n\n          <ul>\n            {this.state.showGifs\n              ? this.state.gifDataArray.map((gif, i) => {\n                  console.log(gif);\n                  let movieImageAltText = \"\";\n                  // check if it's the movie poster from API or our placeholder img\n                  const movieImageCheck = RegExp(/^(http)/);\n                  if (movieImageCheck.test(this.state.movieImageUrl)) {\n                    console.log(movieImageCheck.test(this.state.movieImageUrl));\n                    movieImageAltText = \"Movie poster for\";\n                  } else {\n                    console.log(movieImageCheck.test(this.state.movieImageUrl));\n                    movieImageAltText =\n                      \"Placeholder image for the movie poster for\";\n                  }\n                  return (\n                    <div className=\"movie-details\">\n                      <ul className=\"carousel\">\n                        <li key={i} className=\"carousel-cell\">\n                          <p>Hello!</p>\n                          <img\n                            className=\"carousel-cell-image\"\n                            src={gif.images.original.webp}\n                            alt={gif.title}\n                          />\n                        </li>\n                      </ul>\n                      {/* <img\n                        src={this.state.movieImageUrl}\n                        alt={`${movieImageAltText} \"${this.state.movieTitle}\"`}\n                      /> */}\n                    </div>\n                  );\n                })\n              : null}\n          </ul>\n          {this.state.noGifs ? (\n            <p>\n              Sorry, this movie is not currently playing at our theatre! Please\n              try searching a different movie.\n            </p>\n          ) : null}\n\n          <div className=\"movie-tagline\">\n            {this.state.movieKeywords.length === 3 ? (\n              <p>\n                {`When a ${this.state.movieKeywords[0].name} and a\n              ${this.state.movieKeywords[1].name} fall in love, ${this.state.movieKeywords[2].name} ensues`}\n              </p>\n            ) : null}\n            {this.state.movieKeywords.length === 2 ? (\n              <p>\n                {`When a ${this.state.movieKeywords[0].name} and a\n              ${this.state.movieKeywords[1].name} fall in love`}\n              </p>\n            ) : null}\n            {this.state.movieKeywords.length === 1 ? (\n              <p>{`When a ${this.state.movieKeywords[0].name} and.`}</p>\n            ) : null}\n          </div>\n\n          {this.state.showButton ? (\n            <button onClick={this.resetState}>Watch another movie?</button>\n          ) : null}\n        </ul>\n\n        {this.state.showLoadingScreen ? (\n          <div className=\"loading-screen\">\n            <p>Getting the results...</p>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}