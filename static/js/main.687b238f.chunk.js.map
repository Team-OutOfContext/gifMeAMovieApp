{"version":3,"sources":["components/MovieInput.js","components/MovieSuggestions.js","components/MovieScreen.js","App.js","serviceWorker.js","index.js"],"names":["MovieInput","className","htmlFor","type","id","placeholder","value","this","props","userInputProp","onChange","e","getUserInputProp","getMovieDetailsProp","errorMessageProp","Component","MovieSuggestions","movieSuggestions","map","movieSuggestion","movieImageUrl","poster_path","movieTitleHtml","movieYear","undefined","release_date","title","slice","key","tabIndex","onClick","getMovieKeywords","MovieScreen","class","src","alt","movieImageAltText","movieTitle","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","cssEase","gifDataArray","gif","i","images","original","webp","App","getUserInput","setState","target","getMovieDetails","regexCheck","RegExp","console","log","state","userInput","length","test","axios","url","method","dataResponse","params","api_key","apiKeyMovieDb","query","include_adult","then","response","data","results","errorMessage","autoSuggestions","catch","error","movieId","showLoadingScreen","movie_id","keywords","movieKeywords","filterKeywords","makeGiphyApiCalls","keywordCheck","filteredKeywords","filter","keyword","name","prepGiphyApiCalls","shuffleKeywordsArray","getRandomGifs","apiKeyGiphy","rating","randomGifNum","gifPromises","forEach","push","getKeywordGifs","prepGifData","all","gifPromiseReturns","gifPromiseReturn","gifData","Array","isArray","randomNumber","Math","floor","random","showGifs","showButton","noGifs","newKeywordsArray","newIndex","currentKeyword","keywordToSwap","slicedKeywords","q","prepMoviePosterData","movieImageCheck","resetState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.687b238f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MovieInput extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <label htmlFor=\"userInput\">Search a movie title</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"userInput\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search for a movie\"\r\n          value={this.props.userInputProp}\r\n          onChange={e => {\r\n            this.props.getUserInputProp(e);\r\n            this.props.getMovieDetailsProp();\r\n          }}\r\n        />\r\n        <i className=\"fas fa-search search-icon\"></i>\r\n\r\n        {this.props.errorMessageProp ? <p>Your movie doesn't exist!</p> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieInput;\r\n","import React from \"react\";\r\n\r\nconst MovieSuggestions = props => {\r\n  return (\r\n    <ul className=\"movie-results-part-one\">\r\n      {props.movieSuggestions.map(movieSuggestion => {\r\n        let movieImageUrl = \"\"; //placeholder img url\r\n        // check for movie poster data\r\n        if (movieSuggestion.poster_path !== null) {\r\n          movieImageUrl = `https://image.tmdb.org/t/p/w500${movieSuggestion.poster_path}`;\r\n        }\r\n        let movieTitleHtml = \"\";\r\n        let movieYear = \"\";\r\n        if (\r\n          movieSuggestion.release_date === undefined ||\r\n          movieSuggestion.release_date === \"\"\r\n        ) {\r\n          movieTitleHtml = `${movieSuggestion.title}`;\r\n        } else {\r\n          movieYear = movieSuggestion.release_date.slice(0, 4);\r\n          movieTitleHtml = `${movieSuggestion.title} (${movieYear})`;\r\n        }\r\n\r\n        return (\r\n          <li\r\n            className=\"movie-listing\"\r\n            key={movieSuggestion.id}\r\n            tabIndex=\"0\"\r\n            onClick={() => {\r\n              props.getMovieKeywords(\r\n                movieSuggestion.id,\r\n                movieSuggestion.title,\r\n                movieYear,\r\n                movieImageUrl\r\n              );\r\n            }}\r\n          >\r\n            <p>{movieTitleHtml}</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default MovieSuggestions;\r\n","import React, { Component } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nclass MovieScreen extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n  render() {\r\n    const settings = {\r\n      dots: true,\r\n      infinite: true,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      autoplay: true,\r\n      speed: 2000,\r\n      autoplaySpeed: 1200,\r\n      cssEase: \"linear\"\r\n    };\r\n    return (\r\n      <div class=\"results\">\r\n        <div class=\"wrapper\">\r\n          <div class=\"movie-details\">\r\n            <img\r\n              src={this.props.movieImageUrl}\r\n              alt={this.props.movieImageAltText}\r\n            />\r\n\r\n            <h3>Critic's Review</h3>\r\n            <p>\r\n              Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum\r\n              excepturi, perferendis sed officiis voluptate, hic inventore\r\n              sapiente!\r\n            </p>\r\n          </div>\r\n\r\n          <div class=\"gif-results\">\r\n            <h2>You chose</h2>\r\n            <h3 class=\"movie-title\">{this.props.movieTitle}</h3>\r\n            <Slider {...settings}>\r\n              {this.props.gifDataArray.map((gif, i) => {\r\n                return (\r\n                  <li key={i} className=\"carousel-cell\">\r\n                    <img\r\n                      className=\"carousel-cell-image\"\r\n                      src={gif.images.original.webp}\r\n                      alt={gif.title}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </Slider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieScreen;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./styles/style.css\";\r\nimport MovieInput from \"./components/MovieInput.js\";\r\nimport MovieSuggestions from \"./components/MovieSuggestions.js\";\r\nimport MovieScreen from \"./components/MovieScreen.js\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      apiKeyMovieDb: \"38f9a8f5c677f0356adca226f357b762\",\r\n      apiKeyGiphy: \"x51UFN0xOVPnehx6f4dJxLphvkXnx19U\",\r\n      userInput: \"\",\r\n      autoSuggestions: false,\r\n      movieSuggestions: [\"hi\"],\r\n      movieTitle: \"\",\r\n      movieYear: \"\",\r\n      movieImageUrl: \"\",\r\n      movieImageAltText: \"\",\r\n      movieKeywords: [],\r\n      gifDataArray: [],\r\n      showGifs: false,\r\n      noGifs: false,\r\n      showButton: false,\r\n      errorMessage: false,\r\n      showLoadingScreen: false\r\n    };\r\n  }\r\n\r\n  //This function gets users search term as they type.\r\n  getUserInput = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  // This function is for getting movie details from the user input\r\n  getMovieDetails = () => {\r\n    // use regex to check for non-space characters\r\n    const regexCheck = RegExp(/\\w/g);\r\n    console.log(this.state.userInput.length);\r\n    console.log(regexCheck.test(this.state.userInput));\r\n    // axios call is only made once there are alphanumeric characters\r\n    if (regexCheck.test(this.state.userInput)) {\r\n      // Make axios call to get movie details\r\n      axios({\r\n        url: `https://api.themoviedb.org/3/search/movie`,\r\n        method: \"GET\",\r\n        dataResponse: \"json\",\r\n        params: {\r\n          api_key: this.state.apiKeyMovieDb,\r\n          query: this.state.userInput,\r\n          include_adult: false\r\n        }\r\n      })\r\n        .then(response => {\r\n          // no movies returned (empty array)\r\n          if (response.data.results.length === 0) {\r\n            this.setState({\r\n              errorMessage: true\r\n            });\r\n          } else {\r\n            // Setting the state to an array of movies and making the autosuggestion show up on the page\r\n            this.setState({\r\n              movieSuggestions: response.data.results,\r\n              autoSuggestions: true\r\n            });\r\n          }\r\n        }) // end of .then\r\n        .catch(error => {\r\n          this.setState({\r\n            errorMessage: true\r\n          });\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  // Function to get keywords for the user's movie choice\r\n  getMovieKeywords = (movieId, movieTitle, movieYear, movieImageUrl) => {\r\n    // Save the user's movie choice to state\r\n    this.setState({\r\n      movieTitle: movieTitle,\r\n      movieYear: movieYear,\r\n      movieImageUrl: movieImageUrl,\r\n      showLoadingScreen: true\r\n    });\r\n\r\n    // Axios call to get the keywords\r\n    axios({\r\n      url: `https://api.themoviedb.org/3/movie/${movieId}/keywords`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyMovieDb,\r\n        movie_id: movieId\r\n      }\r\n    })\r\n      .then(response => {\r\n        console.log(response.data.keywords, \"get movie keywords axios call\");\r\n        this.setState({\r\n          movieKeywords: response.data.keywords,\r\n          userInput: \"\",\r\n          autoSuggestions: false\r\n        });\r\n        this.filterKeywords();\r\n        //INSERT FUNCTION TO SET UP MOVIE POSTER FOR RESULTS\r\n      }) // end of .then\r\n      .catch(error => {\r\n        // if there's an error getting keywords, just get 3 random gifs\r\n        this.makeGiphyApiCalls(3);\r\n      });\r\n  };\r\n\r\n  // function to filter for unsearchable keywords\r\n  // (Movie API has some weird keywords like \"aftercreditsstinger\" for post credit scenes that result in nothing/errors from Giphy =__=)\r\n  filterKeywords = () => {\r\n    const keywordCheck = RegExp(/(stinger)$/);\r\n    const filteredKeywords = this.state.movieKeywords.filter(\r\n      keyword => !keywordCheck.test(keyword.name)\r\n    );\r\n    this.setState({\r\n      movieKeywords: filteredKeywords\r\n    });\r\n    this.prepGiphyApiCalls();\r\n  };\r\n\r\n  // function to determine how many keyword-based API calls & random API calls we need\r\n  // if there's 3 or more keywords, shuffle the keyword array for random 3 keywords to use for Giphy API call\r\n  // if less than 3 keywords, we make API calls for the # of random gifs needed to make up 3 gifs total\r\n  prepGiphyApiCalls = () => {\r\n    if (this.state.movieKeywords.length >= 3) {\r\n      this.shuffleKeywordsArray();\r\n    } else if (this.state.movieKeywords.length === 2) {\r\n      this.makeGiphyApiCalls(1);\r\n    } else if (this.state.movieKeywords.length === 1) {\r\n      this.makeGiphyApiCalls(2);\r\n    } else {\r\n      this.makeGiphyApiCalls(3);\r\n    }\r\n  };\r\n\r\n  // function for this.state.movieKgetting a random gif if there are no keywords (API only returns 1 gif)\r\n  getRandomGifs = () => {\r\n    return axios({\r\n      url: `https://api.giphy.com/v1/gifs/random`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyGiphy,\r\n        rating: \"pg\"\r\n      }\r\n    });\r\n  };\r\n\r\n  // function to make the right Giphy API calls, then update to state\r\n  makeGiphyApiCalls = randomGifNum => {\r\n    const gifPromises = [];\r\n    this.state.movieKeywords.forEach(keyword => {\r\n      gifPromises.push(this.getKeywordGifs(keyword.name));\r\n    });\r\n    // making calls for x amount of random gifs needed if lacking keywords\r\n    for (let i = 0; i < randomGifNum; i++) {\r\n      gifPromises.push(this.getRandomGifs());\r\n    }\r\n    this.prepGifData(gifPromises);\r\n  };\r\n\r\n  prepGifData = gifPromises => {\r\n    // wait for API responses to come back\r\n    axios\r\n      .all(gifPromises)\r\n      .then(gifPromiseReturns => {\r\n        const gifDataArray = [];\r\n        gifPromiseReturns.forEach(gifPromiseReturn => {\r\n          let gifData = \"\";\r\n          if (Array.isArray(gifPromiseReturn.data.data) === true) {\r\n            console.log(gifPromiseReturn.data.data);\r\n            const randomNumber = Math.floor(\r\n              Math.random() * gifPromiseReturn.data.data.length\r\n            );\r\n            gifData = gifPromiseReturn.data.data[randomNumber];\r\n          } else {\r\n            gifData = gifPromiseReturn.data.data;\r\n          }\r\n          // Randomly selecting a gif from the response data\r\n          gifDataArray.push(gifData);\r\n        });\r\n\r\n        this.setState({\r\n          showLoadingScreen: false,\r\n          gifDataArray: gifDataArray,\r\n          showGifs: true,\r\n          showButton: true\r\n        });\r\n        console.log(gifDataArray);\r\n      }) // end of .then\r\n      .catch(error => {\r\n        console.log(error);\r\n        // NEED TO PRINT THIS TO PAGE\r\n        console.log(\r\n          \"Sorry, this movie is not currently playing at our theatre! Please try another movie.\"\r\n        );\r\n        this.setState({\r\n          showLoadingScreen: false,\r\n          noGifs: true,\r\n          showButton: true\r\n        });\r\n      });\r\n  };\r\n\r\n  //Function to shuffle keywords from return from Moviedb. Then, grabbing the first three keywords and setting them to state (keywordForGiphy state).\r\n  shuffleKeywordsArray = () => {\r\n    const newKeywordsArray = [...this.state.movieKeywords];\r\n    //Fisher-Yates algorithm for shuffling the array.\r\n    for (let i = newKeywordsArray.length - 1; i > 0; i--) {\r\n      const newIndex = Math.floor(Math.random() * (i + 1));\r\n      const currentKeyword = newKeywordsArray[i];\r\n      const keywordToSwap = newKeywordsArray[newIndex];\r\n      newKeywordsArray[i] = keywordToSwap;\r\n      newKeywordsArray[newIndex] = currentKeyword;\r\n    }\r\n    //Slicing the keyword return to pull only the first three random keywords to use as our giphy call search.\r\n    const slicedKeywords = newKeywordsArray.slice(0, 3);\r\n    this.setState({\r\n      movieKeywords: slicedKeywords\r\n    });\r\n    this.makeGiphyApiCalls(0);\r\n    console.log(this.state.movieKeywords[0].name);\r\n  };\r\n\r\n  // Axios call to get gifs related to the keyword\r\n  getKeywordGifs = keyword => {\r\n    return axios({\r\n      url: `https://api.giphy.com/v1/gifs/search`,\r\n      method: \"GET\",\r\n      dataResponse: \"json\",\r\n      params: {\r\n        api_key: this.state.apiKeyGiphy,\r\n        q: keyword\r\n      }\r\n    });\r\n  };\r\n\r\n  prepMoviePosterData = () => {\r\n    // check if it's the movie poster from API or our placeholder img\r\n    const movieImageCheck = RegExp(/^(http)/);\r\n    if (movieImageCheck.test(this.state.movieImageUrl)) {\r\n      console.log(movieImageCheck.test(this.state.movieImageUrl));\r\n      this.setState({\r\n        movieImageAltText: \"Movie poster for\"\r\n      });\r\n    } else {\r\n      console.log(movieImageCheck.test(this.state.movieImageUrl));\r\n      this.setState({\r\n        movieImageAltText: \"Placeholder image for the movie poster for\"\r\n      });\r\n    }\r\n  };\r\n\r\n  // Reset everything to search a new movie (called on button press)\r\n  resetState = () => {\r\n    this.setState({\r\n      userInput: \"\",\r\n      movieTitle: \"\",\r\n      movieYear: \"\",\r\n      movieImageUrl: \"\",\r\n      movieImageAltText: \"\",\r\n      movieKeywords: [],\r\n      gifDataArray: [],\r\n      showButton: false,\r\n      noGifs: false,\r\n      errorMessage: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"page render\");\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"search\">\r\n          <div className=\"wrapper\">\r\n            <h1>GIF ME A MOVIE!</h1>\r\n            <h3>\r\n              A movie theatre for those who don't have time to watch a full\r\n              movie\r\n            </h3>\r\n\r\n            <MovieInput\r\n              userInputProp={this.state.userInput}\r\n              getUserInputProp={this.getUserInput}\r\n              getMovieDetailsProp={this.getMovieDetails}\r\n              errorMessageProp={this.state.errorMessage}\r\n            />\r\n\r\n            <div className=\"wrapper\">\r\n              <div className=\"search-bar\">\r\n                <div className=\"movie-results\" id=\"mainContent\">\r\n                  {this.state.autoSuggestions ? (\r\n                    <MovieSuggestions\r\n                      movieSuggestions={this.state.movieSuggestions}\r\n                      getMovieKeywords={this.getMovieKeywords}\r\n                    />\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.showGifs ? (\r\n              <MovieScreen\r\n                movieTitle={this.state.movieTitle}\r\n                movieImageUrl={this.state.movieImageUrl}\r\n                movieImageAltText={this.state.movieImageAltText}\r\n                gifDataArray={this.state.gifDataArray}\r\n              />\r\n            ) : null}\r\n\r\n            {/* <div>\r\n              {this.state.showGifs\r\n                ? this.state.gifDataArray.map((gif, i) => {\r\n                    console.log(gif);\r\n                    let movieImageAltText = \"\";\r\n                    // check if it's the movie poster from API or our placeholder img\r\n                    const movieImageCheck = RegExp(/^(http)/);\r\n                    if (movieImageCheck.test(this.state.movieImageUrl)) {\r\n                      console.log(\r\n                        movieImageCheck.test(this.state.movieImageUrl)\r\n                      );\r\n                      movieImageAltText = \"Movie poster for\";\r\n                    } else {\r\n                      console.log(\r\n                        movieImageCheck.test(this.state.movieImageUrl)\r\n                      );\r\n                      movieImageAltText =\r\n                        \"Placeholder image for the movie poster for\";\r\n                    }\r\n                    return (\r\n                      <div className=\"movie-details\">\r\n                        <ul className=\"carousel\">\r\n                          <li key={i} className=\"carousel-cell\">\r\n                            <p>Hello!</p>\r\n                            <img\r\n                              className=\"carousel-cell-image\"\r\n                              src={gif.images.original.webp}\r\n                              alt={gif.title}\r\n                            />\r\n                          </li>\r\n                        </ul>\r\n                        <img\r\n                        src={this.state.movieImageUrl}\r\n                        alt={`${movieImageAltText} \"${this.state.movieTitle}\"`}\r\n                      />\r\n                      </div>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div> */}\r\n\r\n            {this.state.noGifs ? (\r\n              <p>\r\n                Sorry, this movie is not currently playing at our theatre!\r\n                Please try searching a different movie.\r\n              </p>\r\n            ) : null}\r\n\r\n            <div className=\"movie-tagline\">\r\n              {this.state.movieKeywords.length === 3 ? (\r\n                <p>\r\n                  {`When a ${this.state.movieKeywords[0].name} and a\r\n              ${this.state.movieKeywords[1].name} fall in love, ${this.state.movieKeywords[2].name} ensues`}\r\n                </p>\r\n              ) : null}\r\n              {this.state.movieKeywords.length === 2 ? (\r\n                <p>\r\n                  {`When a ${this.state.movieKeywords[0].name} and a\r\n              ${this.state.movieKeywords[1].name} fall in love`}\r\n                </p>\r\n              ) : null}\r\n              {this.state.movieKeywords.length === 1 ? (\r\n                <p>{`When a ${this.state.movieKeywords[0].name} and.`}</p>\r\n              ) : null}\r\n            </div>\r\n\r\n            {this.state.showButton ? (\r\n              <button onClick={this.resetState}>Watch another movie?</button>\r\n            ) : null}\r\n          </div>\r\n\r\n          {this.state.showLoadingScreen ? (\r\n            <div className=\"loading-screen\">\r\n              <p>Getting the results...</p>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}